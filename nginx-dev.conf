
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    lua_package_path "/usr/local/openresty/nginx/html/api/?.lua;;";

    init_by_lua_block  {
        cjson = require("cjson")
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html/openresty-admin/dist;
            index  index.html index.htm;
        }

        location /api/details {
            default_type 'text/html';
            content_by_lua_block {
                local first = require "first"
                local data = {name='Donald'}
                local output = cjson.encode(data)
                ngx.header["Content-type"] = 'application/json'
                local headers = ngx.req.get_headers()
                first.printReponse(cjson.encode(headers))
            }
        }

        location /api/users {
            set $user_id $1;
            default_type 'application/json';
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                -- ngx.say(args)
                local users = require "users"
                ngx.header["Content-type"] = 'application/json'
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
                ngx.header["Access-Control-Allow-Headers"] = "*"
                ngx.header["Content-Type"] = "application/json"
                local data = users.getusers()
                ngx.say(data)
            }
        }

        location /api/users/* {
            set $user_id $1;
            default_type 'application/json';
            content_by_lua_block {
                local users = require "users"
                ngx.header["Content-type"] = 'application/json'
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
                ngx.header["Access-Control-Allow-Headers"] = "*"
                ngx.header["Content-Type"] = "application/json"
                local data = users.getuser(user_id)
                ngx.say(data)
            }
        }

        location /api/sessions {
            default_type 'application/json';
            content_by_lua_block {
                local sessions = require "sessions"
                ngx.header["Content-type"] = 'application/json'
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
                ngx.header["Access-Control-Allow-Headers"] = "*"
                ngx.header["Content-Type"] = "application/json"
                local data = sessions.getSessions()
                ngx.say(data)
            }
        }

        location /nginx-conf {
            default_type 'application/json';
            content_by_lua_block {
                local main = require "main"
                ngx.header["Content-type"] = 'application/json'
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
                ngx.header["Access-Control-Allow-Headers"] = "*"
                ngx.header["Content-Type"] = "application/json"
                local data = main.CreateConf()
                ngx.say(data)
            }
        }

        location /api/ping {
            default_type 'application/json';
            content_by_lua_block {
                local main = require "main"
                ngx.header["Content-type"] = 'application/json'
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
                ngx.header["Access-Control-Allow-Headers"] = "*"
                ngx.header["Content-Type"] = "application/json"
                local data = main.pingPong()
                ngx.say(data)
            }
        }

        #comment
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
